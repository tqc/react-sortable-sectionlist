{"version":3,"sources":["common/SortableSectionList.js","common/DraggedItem.js","web/ItemContent.js","web/DraggedItem.js","common/SortableSectionListRow.js","common/SortableSectionListItem.js","common/PlaceholderItem.js","web/PlaceholderItem.js","web/SortableSectionListItem.js","web/SortableSectionListRow.js","web/SortableSectionList.js","examples/ExampleModel.js","examples/Sections.js","examples/Tree.js","App.js","index.js"],"names":["itemAt","rows","x","y","itemWidth","result","itemY","i","length","row","height","rowIndex","yOffset","rowAt","items","item","xOffset","indexInRow","itemIndex","Math","min","floor","SortableSectionList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","dropTargetIndex","itemX","parentSectionIndex","parentSection","flattenedList","removing","nextIndex","nextItem","itemHeight","props","level","rootItemHeight","index","numCols","target","console","log","draggedItem","objectSpread","parentId","parentItemId","setState","continueDrag","initialDraggedItem","arguments","undefined","dropTargetId","dropTargetItem","dropType","id","willAcceptDrop","handleMove","now","Date","getTime","sections","oldRows","oldRowMap","newRows","originalTree","headerHeight","pushRow","push","pushRowsForNodes","nodes","currentRow","node","nextNode","j","children","collapsed","getRowsForTree","allRows","oldIds","map","o","currentIds","indexOf","removed","Component","DraggedItem","getInitialAnimatedState","Error","animateDragStart","ItemContent","react_default","a","createElement","title","DraggedItemWeb","animOpacity","Animated","Value","timing","toValue","duration","start","ItemComponent","itemComponent","targets_react_dom_default","div","className","style","left","top","opacity","propTypes","SortableSectionListRow","animateAdd","animateRemove","SortableSectionListItem","_this$props","renderPlaceholder","renderHeader","renderItem","PlaceholderItem","PlaceholderItemWeb","width","SortableSectionListItemWeb","animWidth","animHeight","PlaceholderComponent","placeholderComponent","toggleSection","HeaderComponent","headerComponent","onClick","_this$props2","SortableSectionListRowWeb","SortableSectionListItem_SortableSectionListItemWeb","assign","isDropTarget","dropTarget","key","SortableSectionListWeb","onMouseDown","bind","assertThisInitialized","onMouseMove","onMouseUp","e","pageX","containerElement","offsetLeft","pageY","offsetTop","startDrag","endDrag","_this2","updateRows","ref","el","SortableSectionListRow_SortableSectionListRowWeb","DraggedItem_DraggedItemWeb","treeData","sectionData","findInTree","arr","fn","childResult","mutatedTree","treeNode","newData","n","moveItem","targetItem","droppedItem","fromSectionId","toSectionId","s","fromSection","toSection","fromSectionData","toConsumableArray","toSectionData","originalItem","find","splice","originalTargetItem","tn","section","warn","expandStringItems","d","Array","isArray","SectionHeader","ThumbnailItem","Sections","SortableSectionList_SortableSectionListWeb","TreeRow","TreeDemo","treeNodes","toggleTreeNode","w","h","App","href","Tree","examples_Sections","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"oRAsEA,SAASA,EAAOC,EAAMC,EAAGC,EAAGC,GACxB,IAAIC,EAdR,SAAeJ,EAAMC,EAAGC,GAEpB,IADA,IAAIG,EAAQ,EACHC,EAAI,EAAGA,EAAIN,EAAKO,OAAQD,IAAK,CAClC,IAAIE,EAAMR,EAAKM,GACf,GAAID,EAAQG,EAAIC,OAASP,EAAG,MAAO,CAC/BM,MACAE,SAAUJ,EACVK,QAAST,EAAIG,GAEjBA,GAASG,EAAIC,QAKJG,CAAMZ,EAAMC,EAAGC,GAC5B,IAAKE,EAAOI,IAAK,OAAOJ,EAExB,GAAgC,IAA5BA,EAAOI,IAAIK,MAAMN,OAIjB,OAHAH,EAAOU,KAAOV,EAAOI,IAAIK,MAAM,GAC/BT,EAAOW,QAAUd,EACjBG,EAAOY,WAAa,EACbZ,EAGP,IAAIa,EAAYC,KAAKC,IAAID,KAAKE,MAAMnB,EAAIE,GAAYC,EAAOI,IAAIK,MAAMN,OAAS,GAMlF,OALIH,EAAOU,KAAOV,EAAOI,IAAIK,MAAMI,GAC/Bb,EAAOW,QAAUd,EAAIgB,EAAYd,EACjCC,EAAOY,WAAaC,EAGjBb,MAmMIiB,cAjLX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACTC,gBAAiB,MAErBR,EAAKtB,KAAO,GALFsB,sEAOPrB,EAAGC,GAKN,IAJA,IAAI6B,EAAQ,EACR1B,EAAQ,EACR2B,EAAqB,KACrBC,EAAgB,KACX3B,EAAI,EAAGA,EAAImB,KAAKS,cAAc3B,OAAQD,IAAK,CAChD,IAAIQ,EAAOW,KAAKS,cAAc5B,GAC9B,IAAIQ,EAAKqB,SAAT,CAGA,IAFA,IAAIC,EAAY9B,EACZ+B,EAAWZ,KAAKS,gBAAgBE,GAC7BC,GAAYA,EAASF,UAAUE,EAAWZ,KAAKS,gBAAgBE,GACtE,IAAIE,EAAab,KAAKc,MAAMD,WACxBnC,EAAYsB,KAAKc,MAAMpC,UAS3B,GAPmB,IAAfW,EAAK0B,QACLR,EAAqB1B,EACrB2B,EAAgBnB,EAChBwB,EAAab,KAAKc,MAAME,eACxBtC,EAAY,KAGZF,EAAI8B,GAAS9B,EAAI8B,EAAQ5B,GAAaD,EAAIG,GAASH,EAAIG,EAAQiC,EAAY,MAAO,CAClFxB,OACA4B,MAAOpC,EACPS,QAASd,EAAI8B,EACbpB,QAAST,EAAIG,GAGjB,GAAKgC,GAA+B,IAAnBA,EAASG,OAAgBvC,EAAI8B,EAAQ5B,GAAaD,EAAIG,GAASH,EAAIG,EAAQiC,EAAY,MAAO,CAC3GxB,KAAMmB,EACNS,MAAOV,EACPjB,QAAS,EACTJ,QAAS,GAIM,IAAfG,EAAK0B,OACLT,EAAQ,EACR1B,GAASiC,KAETP,GAAS5B,IACIA,EAAYsB,KAAKc,MAAMI,SAAYN,GAA+B,IAAnBA,EAASG,SACjET,EAAQ,EACR1B,GAASiC,IAIrB,OAAO,uCAEDrC,EAAGC,GAET,IAAI0C,EAAS7C,EAAO0B,KAAKzB,KAAMC,EAAGC,EAAGuB,KAAKc,MAAMpC,WAEhD,GADA0C,QAAQC,IAAIF,GACPA,EAAL,CACA,IAAIG,EAAWxB,OAAAyB,EAAA,EAAAzB,CAAA,GACRqB,EAAO9B,KADC,CAEXmC,SAAUL,EAAOpC,IAAI0C,aACrBV,MAAOI,EAAOpC,IAAIgC,MAClBvC,EAAGA,EAAI2C,EAAO7B,QACdb,EAAGA,EAAI0C,EAAOjC,QACdI,QAAS6B,EAAO7B,QAChBJ,QAASiC,EAAOjC,UAEM,IAAtBoC,EAAYP,QAChBf,KAAK0B,SAAS,CAACJ,YAAaA,IAC5BtB,KAAK2B,aAAanD,EAAGC,EAAG6C,0CAEf9C,EAAGC,GAAgD,IAA7CmD,EAA6CC,UAAA/C,OAAA,QAAAgD,IAAAD,UAAA,GAAAA,UAAA,GAAxB7B,KAAKI,MAAMkB,YAC3CA,EAAWxB,OAAAyB,EAAA,EAAAzB,CAAA,GACR8B,EADQ,CAEXpD,EAAGA,EAAIoD,EAAmBtC,QAC1Bb,EAAGA,EAAImD,EAAmBtC,UAE9BU,KAAK0B,SAAS,CAACJ,YAAaA,IAE5B,IAAIH,EAAS7C,EAAO0B,KAAKzB,KAAMC,EAAGC,EAAGuB,KAAKc,MAAMpC,WAChD0C,QAAQC,IAAIF,GAEZ,IAAIY,EAAe,KACfC,EAAiB,KACjBC,EAAW,KACVd,GAAWA,EAAO9B,OAInB2C,EAAiBb,EAAO9B,KACxB0C,EAAeZ,EAAO9B,KAAK6C,GAC3BD,EAAWjC,KAAKc,MAAMqB,eAAehB,EAAO9B,KAAMiC,EAAaH,EAAO7B,QAAS6B,EAAOjC,QAASc,KAAKc,MAAMpC,UAAWsB,KAAKc,MAAMD,aAIhIkB,IAAiB/B,KAAKI,MAAM2B,cAAgBE,IAAajC,KAAKI,MAAM6B,SACpEjC,KAAK0B,SAAS,CAACJ,cAAaS,eAAcC,iBAAgBC,aAG1DjC,KAAK0B,SAAS,CAACJ,gBAGnBF,QAAQC,IAAIU,EAAe,KAAOE,mCAE9BzD,EAAGC,GACHuB,KAAKI,MAAM6B,UACXjC,KAAKc,MAAMsB,WAAWpC,KAAKI,MAAM4B,eAAgBhC,KAAKI,MAAMkB,YAAatB,KAAKI,MAAM6B,UAExFjC,KAAK0B,SAAS,CAACJ,YAAa,KAAMS,aAAc,KAAME,SAAU,4CAQhE,IALA,IAAII,GAAM,IAAIC,MAAOC,UAChBC,EAAYxC,KAAKc,MAAjB0B,SAEDC,EAAUzC,KAAKzB,MAAQ,GACvBmE,EAAY,GACP7D,EAAI,EAAGA,EAAI4D,EAAQ3D,OAAQD,IAChC6D,EAAUD,EAAQ5D,GAAGqD,IAAMO,EAAQ5D,GAWvC,IARA,IAAI8D,EAjOZ,SAAwBC,EAAc1B,EAAS2B,EAAchC,EAAYnC,GACrE,IAAIH,EAAO,GACX,SAASuE,EAAQ1D,EAAOqC,EAAcR,EAAOF,GACzC,IAAIhC,EAAM,CACN0C,eACArC,QACA2B,SAEiB,IAAjB3B,EAAMN,QAA6B,IAAZoC,GAAkBO,EAKzC1C,EAAImD,IAAMT,GAAgB,OAAS,IAAMR,EAHzClC,EAAImD,GAAK9C,EAAM,GAAG8C,GASlBnD,EAAIC,OAJHyC,EAIYZ,EAHAgC,EAKE,IAAf9D,EAAIC,QACJT,EAAKwE,KAAKhE,GA6BlB,OAzBA,SAASiE,EAAiBC,EAAOlC,EAAOU,GACpC,GAAKwB,GAA0B,IAAjBA,EAAMnE,OAGpB,IAFA,IAAIoE,EAAa,GACbjE,EAAW,EACNJ,EAAI,EAAGA,EAAIoE,EAAMnE,OAAQD,IAAK,CACnC,IAAIsE,EAAOF,EAAMpE,GACjBqE,EAAWH,KAAKI,GAEhB,IAAIC,EAAWH,EAAMpE,EAAI,GAEzB,GADgBqE,EAAWpE,QAAUoC,IAAYO,IAC/B2B,EAAU,CACxBN,EAAQI,EAAYzB,IAAgBxC,EAAU8B,GAC9C,IAAK,IAAIsC,EAAI,EAAGA,EAAIH,EAAWpE,OAAQuE,IAAK,CACxC,IAAIhE,EAAO6D,EAAWG,GAClBhE,EAAKiE,WAAajE,EAAKkE,WACvBP,EAAiB3D,EAAKiE,SAAUvC,EAAQ,EAAG1B,EAAK6C,IAGxDgB,EAAa,KAMzBF,CAAiBJ,EAAc,GACxBrE,EA8KWiF,CAAehB,EAAUxC,KAAKc,MAAMI,SAAW,EAAGlB,KAAKc,MAAME,eAAgBhB,KAAKc,MAAMD,YAAc,IAAKb,KAAKc,MAAMpC,WAEhI+E,EAAU,GAEVC,EAASjB,EAAQkB,IAAI,SAAAC,GAAC,OAAIA,EAAE1B,KAC5B2B,EAAalB,EAAQgB,IAAI,SAAAC,GAAC,OAAIA,EAAE1B,KAChCrD,EAAI,EAAOwE,EAAI,EAEZxE,EAAI8D,EAAQ7D,QACf,GAAK4D,EAAUC,EAAQ9D,GAAGqD,IAKrB,CAED,KAAOmB,EAAIK,EAAO5E,QAAU4E,EAAOL,KAAOQ,EAAWhF,IAC7CgF,EAAWC,QAAQJ,EAAOL,IAAM,KAAOZ,EAAQY,GAAGU,QAAU1B,EAAM,MAClEoB,EAAQV,KAARjD,OAAAyB,EAAA,EAAAzB,CAAA,CACIiE,QAAS1B,GACNI,EAAQY,GAFf,CAGI3C,UAAU,KAGlB2C,IAGJI,EAAQV,KAAKJ,EAAQ9D,IAErBA,IACAwE,SAnBAI,EAAQV,KAAKJ,EAAQ9D,IACrBA,IAsBR,KAAOwE,EAAIK,EAAO5E,QACV+E,EAAWC,QAAQJ,EAAOL,IAAM,KAAOZ,EAAQY,GAAGU,QAAU1B,EAAM,MAClEoB,EAAQV,KAARjD,OAAAyB,EAAA,EAAAzB,CAAA,CACIiE,QAAS1B,GACNI,EAAQY,GAFf,CAGI3C,UAAU,KAGlB2C,IAKJ,OAFArD,KAAKzB,KAAOkF,EACZrC,QAAQC,IAAIoC,GACLA,mCAGP,OAAO,YA5LmBO,6BCvFbC,cAKjB,SAAAA,IAAc,IAAApE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiE,IACVpE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmE,GAAA9D,KAAAH,QACKI,MAAQP,EAAKqE,0BAFRrE,yFAKV,MAAM,IAAIsE,MAAM,6KAOhBnE,KAAKoE,kGAKL,OAAO,YAtB0BJ,aCApBK,mLAKR,IACAhF,EAAQW,KAAKc,MAAbzB,KACL,OAAOiF,EAAAC,EAAAC,cAAA,WAAMnF,EAAKoF,cAPeT,aCEpBU,oMAGb,MAAO,CACHC,YAAa,IAAIC,IAASC,MAAM,+CAIpCD,IAASE,OAAO9E,KAAKI,MAAMuE,YAAa,CAACI,QAAS,EAAGC,SAAU,MAAMC,8FAMrEjF,KAAKoE,kGAKA,IACA/E,EAAQW,KAAKc,MAAbzB,KACD6F,EAAgBlF,KAAKc,MAAMqE,eAAiBd,EAEhD,OAAKhF,EAKDiF,EAAAC,EAAAC,cAACY,EAAAb,EAASc,IAAV,CAAcC,UAAW,cACrBC,MAAO,CACHC,KAAMnG,EAAKb,EACXiH,IAAKpG,EAAKZ,EACViH,QAAS1F,KAAKI,MAAMuE,cAGxBL,EAAAC,EAAAC,cAACU,EAAkBlF,KAAKc,QAXrB,YAxByBmD,GAAvBS,EACViB,UAAY1B,EAAY0B,cCFdC,cAMjB,SAAAA,IAAc,IAAA/F,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4F,IACV/F,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA8F,GAAAzF,KAAAH,QACKI,MAAQP,EAAKqE,0BAFRrE,yFAKV,MAAM,IAAIsE,MAAM,sKAOhBnE,KAAK6F,0DAGD7F,KAAKc,MAAM/B,IAAI2B,SACfV,KAAK8F,gBAGL9F,KAAK6F,yDAIT,MAAM,IAAI1B,MAAM,4EAGhB,MAAM,IAAIA,MAAM,0EAGhB,MAAM,IAAIA,MAAM,sEAGhB,OAAO,YAtCqCH,aCA/B+B,cAOjB,SAAAA,IAAc,IAAAlG,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+F,IACVlG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiG,GAAA5F,KAAAH,QACKI,MAAQP,EAAKqE,0BAFRrE,yFAKV,MAAM,IAAIsE,MAAM,sKAOhBnE,KAAK6F,0DAGD7F,KAAKc,MAAMzB,KAAKqB,SAChBV,KAAK8F,gBAGL9F,KAAK6F,yDAIT,MAAM,IAAI1B,MAAM,4EAGhB,MAAM,IAAIA,MAAM,0EAGhB,MAAM,IAAIA,MAAM,sEAEX,IAAA6B,EACehG,KAAKc,MAApBzB,EADA2G,EACA3G,KAAM0B,EADNiF,EACMjF,MACX,MAAgB,gBAAZ1B,EAAK6C,GACElC,KAAKiG,oBAEF,IAAVlF,EACOf,KAAKkG,eAEPnF,GAAS,EACPf,KAAKmG,aAGL,YAlDkCnC,aCDhCoC,mLAMb,OAAO,YAN8BpC,aCAxBqC,mLAER,IACAhH,EAAQW,KAAKc,MAAbzB,KACL,OACIiF,EAAAC,EAAAC,cAAA,OAAKc,UAAW,aAAejG,EAAK0B,MAChCwE,MAAO,CACHe,MAAOjH,EAAKqB,SAAW,EAAI,IAC3B1B,OAAQK,EAAKqB,SAAW,EAAIV,KAAKc,MAAMD,qBARXuF,GAA3BC,EACVV,UAAYS,EAAgBT,cCElBY,oMAGb,MAAO,CACHC,UAAW,IAAI5B,IAASC,MAAM,GAC9BF,YAAa,IAAIC,IAASC,MAAM,GAChC4B,WAAY,IAAI7B,IAASC,MAAM,yCAInCD,IAASE,OAAO9E,KAAKI,MAAMuE,YAAa,CAACI,QAAS,EAAGC,SAAU,MAAMC,QACrEL,IAASE,OAAO9E,KAAKI,MAAMoG,UAAW,CAACzB,QAAS,IAAKC,SAAU,MAAMC,QACrEL,IAASE,OAAO9E,KAAKI,MAAMqG,WAAY,CAAC1B,QAAS/E,KAAKc,MAAMD,WAAYmE,SAAU,MAAMC,gDAGxFL,IAASE,OAAO9E,KAAKI,MAAMuE,YAAa,CAACI,QAAS,EAAGC,SAAU,MAAMC,QACrEL,IAASE,OAAO9E,KAAKI,MAAMoG,UAAW,CAACzB,QAAS,EAAGC,SAAU,MAAMC,QACnEL,IAASE,OAAO9E,KAAKI,MAAMqG,WAAY,CAAC1B,QAAS,EAAGC,SAAU,MAAMC,oDAGpE,IAAIyB,EAAuB1G,KAAKc,MAAM6F,sBAAwBP,EAC9D,OAAQ9B,EAAAC,EAAAC,cAACkC,EAAyB1G,KAAKc,8CAE5B,IAAAkF,EACwBhG,KAAKc,MAAnCzB,EADM2G,EACN3G,KAAM0B,EADAiF,EACAjF,MAAO6F,EADPZ,EACOY,cACdC,EAAkB7G,KAAKc,MAAMgG,iBAAmBzC,EACpD,OACIC,EAAAC,EAAAC,cAAA,OAAKc,UAAW,aAAevE,EAC3BgG,QAAS,kBAAMH,EAAcvH,KAE7BiF,EAAAC,EAAAC,cAACqC,EAAoB7G,KAAKc,6CAIzB,IAAAkG,EAC0BhH,KAAKc,MAAnCzB,EADI2H,EACJ3H,KAAMuH,EADFI,EACEJ,cAAe7F,EADjBiG,EACiBjG,MACtBmE,EAAgBlF,KAAKc,MAAMqE,eAAiBd,EAEhD,OACIC,EAAAC,EAAAC,cAACY,EAAAb,EAASc,IAAV,CAAcC,UAAW,aAAevE,EACpCwE,MAAO,CAEHG,QAAS1F,KAAKI,MAAMuE,YACpB2B,MAAOtG,KAAKI,MAAMoG,UAElBxH,OAAQgB,KAAKI,MAAMqG,YAIvBM,QAAS,kBAAMH,EAAcvH,KAE7BiF,EAAAC,EAAAC,cAACU,EAAkBlF,KAAKc,eAnDgBiF,GAAnCQ,EACVZ,UAAYI,EAAwBJ,cCD1BsB,oMAGb,MAAO,CACHtC,YAAa,IAAIC,IAASC,MAAM,GAChC4B,WAAY,IAAI7B,IAASC,MAAM,yCAInCD,IAASE,OAAO9E,KAAKI,MAAMuE,YAAa,CAACI,QAAS,EAAGC,SAAU,MAAMC,QACrEL,IAASE,OAAO9E,KAAKI,MAAMqG,WAAY,CAAC1B,QAAS/E,KAAKc,MAAM/B,IAAIC,OAAQgG,SAAU,MAAMC,gDAGxFL,IAASE,OAAO9E,KAAKI,MAAMuE,YAAa,CAACI,QAAS,EAAGC,SAAU,MAAMC,QACrEL,IAASE,OAAO9E,KAAKI,MAAMqG,WAAY,CAAC1B,QAAS,EAAGC,SAAU,MAAMC,yCAE/D,IAAApF,EAAAG,KACAjB,EAAOiB,KAAKc,MAAZ/B,IAEL,OACIuF,EAAAC,EAAAC,cAACY,EAAAb,EAASc,IAAV,CAAcC,UAAW,aAAevG,EAAIgC,MACxCwE,MAAO,CACHG,QAAS1F,KAAKI,MAAMuE,YACpB3F,OAAQgB,KAAKI,MAAMqG,aAGtB1H,EAAIK,MAAMuE,IAAI,SAACtE,EAAM4B,GAAP,OAAiBqD,EAAAC,EAAAC,cAAC0C,EAADpH,OAAAqH,OAAA,GAA6BtH,EAAKiB,MAAlC,CAAyCsG,aAAcvH,EAAKO,MAAMiH,YAAcxH,EAAKO,MAAMiH,WAAW9H,aAAe0B,EAAOqG,IAAKjI,EAAK6C,GAAI7C,KAAMA,EAAM0B,MAAOhC,EAAIgC,mBA1B1J6E,GAAlCqB,EACVtB,UAAYC,EAAuBD,cCFzB4B,cAEjB,SAAAA,IAAc,IAAA1H,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuH,IACV1H,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyH,GAAApH,KAAAH,QACKwH,YAAc3H,EAAK2H,YAAYC,KAAjB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KACnBA,EAAK8H,YAAc9H,EAAK8H,YAAYF,KAAjB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KACnBA,EAAK+H,UAAY/H,EAAK+H,UAAUH,KAAf3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KAJPA,2EAMFgI,GACR,IAAI7H,KAAKI,MAAMkB,YAAf,CACA,IAAI9C,EAAIqJ,EAAEC,MAAQ9H,KAAK+H,iBAAiBC,WACpCvJ,EAAIoJ,EAAEI,MAAQjI,KAAK+H,iBAAiBG,UACxClI,KAAKmI,UAAU3J,EAAGC,wCAEVoJ,GACR,GAAK7H,KAAKI,MAAMkB,YAAhB,CACA,IAAI9C,EAAIqJ,EAAEC,MAAQ9H,KAAK+H,iBAAiBC,WACpCvJ,EAAIoJ,EAAEI,MAAQjI,KAAK+H,iBAAiBG,UACxClI,KAAK2B,aAAanD,EAAGC,sCAEfoJ,GACD7H,KAAKI,MAAMkB,aAChBtB,KAAKoI,2CAEA,IAAAC,EAAArI,KACAsB,EAAetB,KAAKI,MAApBkB,YACD/C,EAAOyB,KAAKsI,aAEhB,OACIhE,EAAAC,EAAAC,cAAA,OACI+D,IAAK,SAACC,GAASH,EAAKN,iBAAmBS,GACvClD,UAAW,eAAiBtF,KAAKc,MAAMwE,UACvCkC,YAAaxH,KAAKwH,YAClBG,YAAa3H,KAAK2H,YAClBC,UAAW5H,KAAK4H,WAEfrJ,EAAKoF,IAAI,SAAC5E,EAAKkC,GAAN,OAAgBqD,EAAAC,EAAAC,cAACiE,EAAD3I,OAAAqH,OAAA,GAA4BkB,EAAKvH,MAAjC,CAAwCsG,aAAciB,EAAKjI,MAAMiH,YAAcgB,EAAKjI,MAAMiH,WAAWpI,WAAagC,EAAOqG,IAAKvI,EAAImD,GAAInD,IAAKA,OACrKuF,EAAAC,EAAAC,cAACkE,EAAD5I,OAAAqH,OAAA,GAAiBnH,KAAKc,MAAtB,CAA6BzB,KAAMiC,aArCC1B,GAA/B2H,EACV5B,UAAY/F,EAAoB+F,sBCNhCgD,EAAW,CAClB,CAACzG,GAAI,KAAMuC,MAAO,SAAUnB,SAAU,CAAC,QAAS,UAChD,CAACpB,GAAI,KAAMuC,MAAO,SAAUnB,SAAU,CAAC,CAACpB,GAAI,KAAMuC,MAAO,YAAanB,SAAU,CAAC,QAAS,UAAW,QAAS,UAC9G,CAACpB,GAAI,KAAMuC,MAAO,SAAUnB,SAAU,CAAC,QAAS,WAGzCsF,EAAc,CACrB,CAAC1G,GAAI,KAAMuC,MAAO,gBAAiBnB,SAAU,CAAC,QAAS,UACvD,CAACpB,GAAI,KAAMuC,MAAO,iBAAkBnB,SAAU,CAAC,SAAU,SAAU,SAAU,WAC7E,CAACpB,GAAI,KAAMuC,MAAO,gBAAiBnB,SAAU,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,WAC3F,CAACpB,GAAI,KAAMuC,MAAO,iBAAkBnB,SAAU,CAAC,QAAS,WAG5D,SAASuF,EAAWC,EAAKC,GACrB,IAAK,IAAIlK,EAAI,EAAGA,EAAIiK,EAAIhK,OAAQD,IAAK,CACjC,GAAIkK,EAAGD,EAAIjK,IAAK,OAAOiK,EAAIjK,GAC3B,GAAIiK,EAAIjK,GAAGyE,SAAU,CACjB,IAAI0F,EAAcH,EAAWC,EAAIjK,GAAGyE,SAAUyF,GAC9C,GAAIC,EAAa,OAAOA,GAGhC,OAAO,KAIJ,SAASC,EAAYC,EAAUhH,EAAI6G,GACtC,GAAIG,EAAShH,KAAOA,EAAI,OAAO6G,EAAGG,GAClC,GAAwB,kBAAbA,EAAuB,OAAOA,EACzC,IAAKA,EAAS5F,UAAyC,IAA7B4F,EAAS5F,SAASxE,OAAc,OAAOoK,EAEjE,IADA,IAAIC,EAAUD,EAAS5F,SAASK,IAAI,SAAAyF,GAAC,OAAIH,EAAYG,EAAGlH,EAAI6G,KACnDlK,EAAI,EAAGA,EAAIsK,EAAQrK,OAAQD,IAChC,GAAIsK,EAAQtK,KAAOqK,EAAS5F,SAASzE,GACjC,OAAOiB,OAAAyB,EAAA,EAAAzB,CAAA,GACAoJ,EADP,CAEI5F,SAAU6F,IAItB,OAAOD,EAGJ,SAASG,EAASzG,EAAc0G,EAAYC,EAAatH,GAC5D,IAAIuH,EAAgBD,EAAY/H,SAC5BiI,EAAc,KAClB,GAAiB,OAAbxH,EAAJ,CASA,GAPIwH,EADa,SAAbxH,EACcqH,EAAWpH,GAGXoH,EAAW9H,SAIzB8H,EAAWpH,KAAOqH,EAAYrH,GAC9B,OAAOU,EAIX,GAAI2G,EAAYjG,SAEZ,GADkBuF,EAAWU,EAAYjG,SAAU,SAAAoG,GAAC,OAAIA,EAAExH,KAAOoH,EAAWpH,KAC3D,OAAOU,EAK5B,IAAI+G,EAAcd,EAAWjG,EAAc,SAAA8G,GAAC,OAAIA,EAAExH,KAAOsH,IACrDI,EAAYf,EAAWjG,EAAc,SAAA8G,GAAC,OAAIA,EAAExH,KAAOuH,IAEvDrI,QAAQC,IAAI,UACZD,QAAQC,IAAIsI,GACZvI,QAAQC,IAAIuI,GAEZ,IAAIC,EAAe/J,OAAAgK,EAAA,EAAAhK,CAAQ6J,EAAYrG,UAAY,IAC/CyG,EAAgBP,IAAkBC,EAAcI,EAAhC/J,OAAAgK,EAAA,EAAAhK,CAAuD8J,EAAUtG,UAAY,IAE7F0G,EAAeH,EAAgBI,KAAK,SAAArG,GAAC,OAAIA,IAAM2F,EAAY9E,OAASb,EAAE1B,KAAOqH,EAAYrH,KAG7F,GAAK8H,EAAL,CAMA,GAAiB,SAAb/H,EACA4H,EAAgBK,OAAOL,EAAgB/F,QAAQkG,GAAe,GAC9DD,EAAchH,KAAdjD,OAAAyB,EAAA,EAAAzB,CAAA,GAAuBkK,EAAvB,CAAqCxI,SAAUiI,SAE9C,CACDI,EAAgBK,OAAOL,EAAgB/F,QAAQkG,GAAe,GAC9D,IAAIG,EAAqBJ,EAAcE,KAAK,SAAArG,GAAC,OAAIA,IAAM0F,EAAW7E,OAASb,EAAE1B,KAAOoH,EAAWpH,KAC9E,WAAbD,EACA8H,EAAcG,OAAOH,EAAcjG,QAAQqG,GAAqB,EAAhErK,OAAAyB,EAAA,EAAAzB,CAAA,GAAuEkK,EAAvE,CAAqFxI,SAAUiI,KAE7E,UAAbxH,GACL8H,EAAcG,OAAOH,EAAcjG,QAAQqG,GAAsB,EAAG,EAApErK,OAAAyB,EAAA,EAAAzB,CAAA,GAA2EkK,EAA3E,CAAyFxI,SAAUiI,KAgC3G,OA3BAM,EAAgBA,EACXpG,IAAI,SAACyG,GAAD,OAAQnB,EACTmB,EACAZ,EACA,SAAAa,GAAO,OAAAvK,OAAAyB,EAAA,EAAAzB,CAAA,GACAuK,EADA,CAEH/G,SAAUuG,QAIRjH,EACTe,IAAI,SAACyG,GAAD,OAAQnB,EACTmB,EACAZ,EACA,SAAAa,GAAO,OAAAvK,OAAAyB,EAAA,EAAAzB,CAAA,GACAuK,EADA,CAEH/G,SAAUuG,QAEjBlG,IAAI,SAACyG,GAAD,OAAQnB,EACTmB,EACAX,EACA,SAAAY,GAAO,OAAAvK,OAAAyB,EAAA,EAAAzB,CAAA,GACAuK,EADA,CAEH/G,SAAUyG,QA5ClB3I,QAAQkJ,KAAK,4BAmDd,SAASC,EAAkBC,EAAGhJ,EAAUP,GAC3C,GAAiB,kBAANuJ,EACP,MAAO,CACHtI,IAAKV,GAAY,QAAU,IAAMP,EACjCwD,MAAO+F,EACPhJ,YAGH,GAAIiJ,MAAMC,QAAQF,GACnB,OAAOA,EAAE7G,IAAI,SAACyF,EAAGvK,GAAJ,OAAU0L,EAAkBnB,EAAG5H,EAAU3C,KAErD,GAAiB,kBAAN2L,EAAgB,CAC5B,IAAI7L,EAAMmB,OAAAyB,EAAA,EAAAzB,CAAA,CACN0B,YACGgJ,GAIP,OAFKA,EAAEtI,KAAIvD,EAAOuD,IAAMV,GAAY,QAAU,IAAMP,GAChDuJ,EAAElH,WAAU3E,EAAO2E,SAAWiH,EAAkBC,EAAElH,SAAU3E,EAAOuD,KAChEvD,EAGP,OAAO6L,MC9ITG,mLAKO,IACAtL,EAAQW,KAAKc,MAAbzB,KACL,OACIiF,EAAAC,EAAAC,cAAA,OAAKc,UAAU,iBAAiBjG,EAAKoF,cARrBT,aAatB4G,mLAKO,IACAvL,EAAQW,KAAKc,MAAbzB,KACL,OACIiF,EAAAC,EAAAC,cAAA,OAAKc,UAAU,kBAAf,SAAuCjG,EAAKoF,cAR5BT,aAmEb6G,cApDX,SAAAA,IAAc,IAAAhL,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6K,IACVhL,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+K,GAAA1K,KAAAH,QACKI,MAAQ,CACToC,SAAU+H,EAAkB3B,IAEhCxH,QAAQC,IAAIxB,EAAKO,MAAMoC,UACvB3C,EAAK+G,cAAgB/G,EAAK+G,cAAca,KAAnB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KACrBA,EAAKuC,WAAavC,EAAKuC,WAAWqF,KAAhB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KAClBA,EAAKsC,eAAiBtC,EAAKsC,eAAesF,KAApB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KARZA,6EAUAR,GACV,IAAI8J,EAAUnJ,KAAKI,MAAMoC,SAASmB,IAAI,SAACR,GACnC,OAAO8F,EAAY9F,EAAM9D,EAAK6C,GAAI,SAAAkH,GAAC,OAAAtJ,OAAAyB,EAAA,EAAAzB,CAAA,GAASsJ,EAAT,CAAY7F,WAAY6F,EAAE7F,gBAEjEvD,KAAK0B,SAAS,CAACc,SAAU2G,2CAEdG,EAAYC,EAAa/K,EAAGC,GACvC,YAA4BqD,IAAxBwH,EAAW9H,SAA+B,OAC1ChD,EAAI,GAAW,SAEVA,GAAK,GAAW,QACb,wCAEL8K,EAAYC,EAAatH,GAEhCb,QAAQC,IAAI,YAAckI,EAAY9E,MAAQ,IAAMxC,EAAW,IAAMqH,EAAW7E,OAEhFzE,KAAK0B,SAAS,CAACc,SAAU6G,EAASrJ,KAAKI,MAAMoC,SAAU8G,EAAYC,EAAatH,sCAK3E,IACAO,EAAYxC,KAAKI,MAAjBoC,SACL,OACI8B,EAAAC,EAAAC,cAACsG,EAAD,CACIxF,UAAU,OACVpE,QAAS,EACTxC,UAAW,IACXmC,WAAY,IACZG,eAAgB,GAChB4F,cAAe5G,KAAK4G,cACpBE,gBAAiB6D,EACjBxF,cAAeyF,EACfzI,eAAgBnC,KAAKmC,eACrBC,WAAYpC,KAAKoC,WACjBI,SAAUA,WA/CHwB,aC3BjB+G,mLAMO,IACA1L,EAAQW,KAAKc,MAAbzB,KACL,OAAIA,EAAKiE,SAEDgB,EAAAC,EAAAC,cAAA,WAAMnF,EAAKkE,UAAY,IAAM,IAA7B,IAAmClE,EAAKoF,OAKxCH,EAAAC,EAAAC,cAAA,WAAMnF,EAAKoF,cAfLT,aAoEPgH,cA9CX,SAAAA,IAAc,IAAAnL,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgL,IACVnL,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkL,GAAA7K,KAAAH,QAKJI,MAAQ,CACJ6K,UAAWV,EAAkB5B,IAL7B9I,EAAKqL,eAAiBrL,EAAKqL,eAAezD,KAApB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KACtBA,EAAKuC,WAAavC,EAAKuC,WAAWqF,KAAhB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KAClBA,EAAKsC,eAAiBtC,EAAKsC,eAAesF,KAApB3H,OAAA4H,EAAA,EAAA5H,QAAA4H,EAAA,EAAA5H,CAAAD,KAJZA,8EASCR,GACX,IAAI8J,EAAUnJ,KAAKI,MAAM6K,UAAUtH,IAAI,SAACR,GACpC,OAAO8F,EAAY9F,EAAM9D,EAAK6C,GAAI,SAAAkH,GAAC,OAAAtJ,OAAAyB,EAAA,EAAAzB,CAAA,GAASsJ,EAAT,CAAY7F,WAAY6F,EAAE7F,gBAEjEvD,KAAK0B,SAAS,CAACuJ,UAAW9B,2CAEfG,EAAYC,EAAa/K,EAAGC,EAAG0M,EAAGC,GAC7C,OAAI9B,EAAWpH,KAAOqH,EAAYrH,GAAW,UACjBJ,IAAxBwH,EAAW9H,SAA+B,OAC1C/C,EAAI,EAAU,SACTA,GAAK,GAAKA,EAAI,GAAW,OACzBA,GAAK,GAAW,QACb,wCAEL6K,EAAYC,EAAatH,GAChCb,QAAQC,IAAI,YAAckI,EAAY9E,MAAQ,IAAMxC,EAAW,IAAMqH,EAAW7E,OAChFzE,KAAK0B,SAAS,CAACuJ,UAAW5B,EAASrJ,KAAKI,MAAM6K,UAAW3B,EAAYC,EAAatH,sCAE7E,IACAgJ,EAAajL,KAAKI,MAAlB6K,UACL,OACI3G,EAAAC,EAAAC,cAACsG,EAAD,CACIxF,UAAU,OACVpE,QAAS,EACTxC,UAAW,IACXmC,WAAY,GACZG,eAAgB,GAChB4F,cAAe5G,KAAKkL,eACpB/I,eAAgBnC,KAAKmC,eACrBC,WAAYpC,KAAKoC,WACjB0E,gBAAiBiE,EACjB5F,cAAe4F,EACfvI,SAAUyI,WA1CHjH,aCqCRqH,mLAzDP,OACI/G,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACXhB,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,KAAGc,UAAU,WAAWgG,KAAK,qDAA7B,6CAEAhH,EAAAC,EAAAC,cAAA,2EACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,iEACAF,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAAA,yEACAF,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,oEAKJF,EAAAC,EAAAC,cAAA,kKACAF,EAAAC,EAAAC,cAAA,qTACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,mGACAF,EAAAC,EAAAC,cAAA,OAAKc,UAAU,WACXhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,YACXhB,EAAAC,EAAAC,cAAC+G,EAAD,OAEJjH,EAAAC,EAAAC,cAAA,OAAKc,UAAU,YACXhB,EAAAC,EAAAC,cAACgH,EAAD,QAGRlH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,uDAELF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,YAAO,oWArCVR,aCFlByH,IAASC,OAAOpH,EAAAC,EAAAC,cAACmH,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b1c5d8d2.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction getRowsForTree(originalTree, numCols, headerHeight, itemHeight, itemWidth) {\n    let rows = [];\n    function pushRow(items, parentItemId, index, level) {\n        let row = {\n            parentItemId,\n            items,\n            level\n        };\n        if (items.length === 1 && (numCols === 1 || !parentItemId)) {\n            // single column or header - push item as a row\n            row.id = items[0].id;\n        }\n        else {\n            row.id = (parentItemId || \"row\") + \"-\" + index;\n        }\n        if (!parentItemId) {\n            row.height = headerHeight;\n        }\n        else {\n            row.height = itemHeight;\n        }\n        if (row.height !== 0) {\n            rows.push(row);\n        }\n    }\n\n    function pushRowsForNodes(nodes, level, parentItemId) {\n        if (!nodes || nodes.length === 0) return;\n        let currentRow = [];\n        let rowIndex = 0;\n        for (let i = 0; i < nodes.length; i++) {\n            let node = nodes[i];\n            currentRow.push(node);\n\n            let nextNode = nodes[i + 1];\n            let rowIsFull = currentRow.length >= numCols || !parentItemId;\n            if (rowIsFull || !nextNode) {\n                pushRow(currentRow, parentItemId, ++rowIndex, level);\n                for (let j = 0; j < currentRow.length; j++) {\n                    let item = currentRow[j];\n                    if (item.children && !item.collapsed) {\n                        pushRowsForNodes(item.children, level + 1, item.id);\n                    }\n                }\n                currentRow = [];\n            }\n\n        }\n    }\n\n    pushRowsForNodes(originalTree, 0);\n    return rows;\n}\n\nfunction rowAt(rows, x, y) {\n    let itemY = 0;\n    for (let i = 0; i < rows.length; i++) {\n        let row = rows[i];\n        if (itemY + row.height > y) return {\n            row,\n            rowIndex: i,\n            yOffset: y - itemY\n        };\n        itemY += row.height;\n    }\n}\n\nfunction itemAt(rows, x, y, itemWidth) {\n    let result = rowAt(rows, x, y);\n    if (!result.row) return result;\n\n    if (result.row.items.length === 1) {\n        result.item = result.row.items[0];\n        result.xOffset = x;\n        result.indexInRow = 0;\n        return result;\n    }\n    else {\n        let itemIndex = Math.min(Math.floor(x / itemWidth), result.row.items.length - 1);\n        result.item = result.row.items[itemIndex];\n        result.xOffset = x - itemIndex * itemWidth;\n        result.indexInRow = itemIndex;\n    }\n\n    return result;\n}\n\nclass SortableSectionList extends Component {\n    static propTypes = {\n        className: PropTypes.string,\n        numCols: PropTypes.number.isRequired,\n        itemHeight: PropTypes.number.isRequired,\n        itemWidth: PropTypes.number.isRequired,\n        rootItemHeight: PropTypes.number.isRequired,\n        toggleSection: PropTypes.func.isRequired,\n        willAcceptDrop: PropTypes.func.isRequired,\n        handleMove: PropTypes.func.isRequired,\n        headerComponent: PropTypes.func.isRequired,\n        itemComponent: PropTypes.func.isRequired,\n        sections: PropTypes.arrayOf(PropTypes.shape({\n        })).isRequired\n    }\n    constructor() {\n        super();\n        this.state = {\n            dropTargetIndex: null,\n        };\n        this.rows = [];\n    }\n    itemAt(x, y) {\n        let itemX = 0;\n        let itemY = 0;\n        let parentSectionIndex = null;\n        let parentSection = null;\n        for (let i = 0; i < this.flattenedList.length; i++) {\n            let item = this.flattenedList[i];\n            if (item.removing) continue;\n            let nextIndex = i;\n            let nextItem = this.flattenedList[++nextIndex];\n            while (nextItem && nextItem.removing) nextItem = this.flattenedList[++nextIndex];\n            let itemHeight = this.props.itemHeight;\n            let itemWidth = this.props.itemWidth;\n\n            if (item.level === 0) {\n                parentSectionIndex = i;\n                parentSection = item;\n                itemHeight = this.props.rootItemHeight;\n                itemWidth = 1000;\n            }\n\n            if (x > itemX && x < itemX + itemWidth && y > itemY && y < itemY + itemHeight) return {\n                item,\n                index: i,\n                xOffset: x - itemX,\n                yOffset: y - itemY\n            };\n\n            if ((nextItem && nextItem.level === 0) && x > itemX + itemWidth && y > itemY && y < itemY + itemHeight) return {\n                item: parentSection,\n                index: parentSectionIndex,\n                xOffset: 0,\n                yOffset: 0\n            };\n\n\n            if (item.level === 0) {\n                itemX = 0;\n                itemY += itemHeight;\n            } else {\n                itemX += itemWidth;\n                if (itemX >= itemWidth * this.props.numCols || (nextItem && nextItem.level === 0)) {\n                    itemX = 0;\n                    itemY += itemHeight;\n                }\n            }\n        }\n        return null;\n    }\n    startDrag(x, y) {\n\n        let target = itemAt(this.rows, x, y, this.props.itemWidth);\n        console.log(target);\n        if (!target) return;\n        let draggedItem = {\n            ...target.item,\n            parentId: target.row.parentItemId,\n            level: target.row.level,\n            x: x - target.xOffset,\n            y: y - target.yOffset,\n            xOffset: target.xOffset,\n            yOffset: target.yOffset\n        };\n        if (draggedItem.level === 0) return;\n        this.setState({draggedItem: draggedItem});\n        this.continueDrag(x, y, draggedItem);\n    }\n    continueDrag(x, y, initialDraggedItem = this.state.draggedItem) {\n        let draggedItem = {\n            ...initialDraggedItem,\n            x: x - initialDraggedItem.xOffset,\n            y: y - initialDraggedItem.xOffset,\n        };\n        this.setState({draggedItem: draggedItem});\n\n        let target = itemAt(this.rows, x, y, this.props.itemWidth);\n        console.log(target);\n\n        let dropTargetId = null;\n        let dropTargetItem = null;\n        let dropType = null;\n        if (!target || !target.item) {\n            // not accepting drop\n        }\n        else {\n            dropTargetItem = target.item;\n            dropTargetId = target.item.id;\n            dropType = this.props.willAcceptDrop(target.item, draggedItem, target.xOffset, target.yOffset, this.props.itemWidth, this.props.itemHeight);\n        }\n\n\n        if (dropTargetId !== this.state.dropTargetId || dropType !== this.state.dropType) {\n            this.setState({draggedItem, dropTargetId, dropTargetItem, dropType});\n        }\n        else {\n            this.setState({draggedItem});\n        }\n\n        console.log(dropTargetId + \": \" + dropType);\n    }\n    endDrag(x, y) {\n        if (this.state.dropType) {\n            this.props.handleMove(this.state.dropTargetItem, this.state.draggedItem, this.state.dropType);\n        }\n        this.setState({draggedItem: null, dropTargetId: null, dropType: null});\n    }\n    updateRows() {\n        let now = new Date().getTime();\n        let {sections} = this.props;\n\n        let oldRows = this.rows || [];\n        let oldRowMap = [];\n        for (let i = 0; i < oldRows.length; i++) {\n            oldRowMap[oldRows[i].id] = oldRows[i];\n        }\n\n        let newRows = getRowsForTree(sections, this.props.numCols || 1, this.props.rootItemHeight, this.props.itemHeight || 200, this.props.itemWidth || 150);\n\n        let allRows = [];\n\n        let oldIds = oldRows.map(o => o.id);\n        let currentIds = newRows.map(o => o.id);\n        let i = 0; let j = 0;\n\n        while (i < newRows.length) {\n            if (!oldRowMap[newRows[i].id]) {\n                // new item\n                allRows.push(newRows[i]);\n                i++;\n            }\n            else {\n                // get to this item in old list, recording anything removed\n                while (j < oldIds.length && oldIds[j] !== currentIds[i]) {\n                    if (currentIds.indexOf(oldIds[j]) < 0 && !(oldRows[j].removed < now - 1000)) {\n                        allRows.push({\n                            removed: now,\n                            ...oldRows[j],\n                            removing: true\n                        });\n                    }\n                    j++;\n                }\n\n                allRows.push(newRows[i]);\n                // todo: record changes within the row\n                i++;\n                j++;\n            }\n        }\n\n        while (j < oldIds.length) {\n            if (currentIds.indexOf(oldIds[j]) < 0 && !(oldRows[j].removed < now - 1000)) {\n                allRows.push({\n                    removed: now,\n                    ...oldRows[j],\n                    removing: true\n                });\n            }\n            j++;\n        }\n\n        this.rows = allRows;\n        console.log(allRows);\n        return allRows;\n    }\n    render() {\n        return null;\n    }\n}\n\nexport default SortableSectionList;\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class DraggedItem extends Component {\n    static propTypes = {\n        item: PropTypes.shape({\n        })\n    }\n    constructor() {\n        super();\n        this.state = this.getInitialAnimatedState();\n    }\n    getInitialAnimatedState() {\n        throw new Error(\"getInitialAnimatedState not implemented\");\n    }\n    animateDragStart() {\n    }\n    animateDragEnd() {\n    }\n    componentDidMount() {\n        this.animateDragStart();\n    }\n    componentDidUpdate() {\n    }\n    render() {\n        return null;\n    }\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class ItemContent extends Component {\n    static propTypes = {\n        item: PropTypes.shape({\n        }).isRequired\n    }\n    render() {\n        let {item} = this.props;\n        return <div>{item.title}</div>;\n    }\n}","import React from 'react';\nimport Animated from \"animated/lib/targets/react-dom\";\nimport DraggedItem from \"../common/DraggedItem\";\nimport ItemContent from \"./ItemContent\";\n\nexport default class DraggedItemWeb extends DraggedItem {\n    static propTypes = DraggedItem.propTypes;\n    getInitialAnimatedState() {\n        return {\n            animOpacity: new Animated.Value(0),\n        };\n    }\n    animateDragStart() {\n        Animated.timing(this.state.animOpacity, {toValue: 1, duration: 500}).start();\n    }\n    animateDragEnd() {\n\n    }\n    componentDidMount() {\n        this.animateDragStart();\n    }\n    componentDidUpdate() {\n\n    }\n    render() {\n        let {item} = this.props;\n        let ItemComponent = this.props.itemComponent || ItemContent;\n\n        if (!item) {\n            return null;\n        }\n\n        return (\n            <Animated.div className={\"draggeditem\"}\n                style={{\n                    left: item.x,\n                    top: item.y,\n                    opacity: this.state.animOpacity,\n                }}\n            >\n                <ItemComponent {...this.props} />\n            </Animated.div>\n        );\n    }\n}","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default class SortableSectionListRow extends Component {\n    static propTypes = {\n        row: PropTypes.shape({\n            removing: PropTypes.bool\n        }).isRequired\n    }\n    constructor() {\n        super();\n        this.state = this.getInitialAnimatedState();\n    }\n    getInitialAnimatedState() {\n        throw new Error(\"getInitialAnimatedState not implemented\");\n    }\n    animateAdd() {\n    }\n    animateRemove() {\n    }\n    componentDidMount() {\n        this.animateAdd();\n    }\n    componentDidUpdate() {\n        if (this.props.row.removing) {\n            this.animateRemove();\n        }\n        else {\n            this.animateAdd();\n        }\n    }\n    renderPlaceholder() {\n        throw new Error(\"renderPlaceholder not implemented\");\n    }\n    renderHeader() {\n        throw new Error(\"renderPlaceholder not implemented\");\n    }\n    renderItem() {\n        throw new Error(\"renderPlaceholder not implemented\");\n    }\n    render() {\n        return null;\n    }\n}","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default class SortableSectionListItem extends Component {\n    static propTypes = {\n        item: PropTypes.shape({\n            removing: PropTypes.bool\n        }).isRequired,\n        level: PropTypes.number.isRequired\n    }\n    constructor() {\n        super();\n        this.state = this.getInitialAnimatedState();\n    }\n    getInitialAnimatedState() {\n        throw new Error(\"getInitialAnimatedState not implemented\");\n    }\n    animateAdd() {\n    }\n    animateRemove() {\n    }\n    componentDidMount() {\n        this.animateAdd();\n    }\n    componentDidUpdate() {\n        if (this.props.item.removing) {\n            this.animateRemove();\n        }\n        else {\n            this.animateAdd();\n        }\n    }\n    renderPlaceholder() {\n        throw new Error(\"renderPlaceholder not implemented\");\n    }\n    renderHeader() {\n        throw new Error(\"renderPlaceholder not implemented\");\n    }\n    renderItem() {\n        throw new Error(\"renderPlaceholder not implemented\");\n    }\n    render() {\n        let {item, level} = this.props;\n        if (item.id === \"placeholder\") {\n            return this.renderPlaceholder();\n        }\n        if (level === 0) {\n            return this.renderHeader();\n        }\n        else if (level >= 0) {\n            return this.renderItem();\n        }\n        else {\n            return null;\n        }\n    }\n}","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class PlaceholderItem extends Component {\n    static propTypes = {\n        item: PropTypes.shape({\n        }).isRequired\n    }\n    render() {\n        return null;\n    }\n}","import React from 'react';\nimport PlaceholderItem from \"../common/PlaceholderItem\";\n\nexport default class PlaceholderItemWeb extends PlaceholderItem {\n    static propTypes = PlaceholderItem.propTypes;\n    render() {\n        let {item} = this.props;\n        return (\n            <div className={\"ssli ssli-\" + item.level}\n                style={{\n                    width: item.removing ? 0 : 150,\n                    height: item.removing ? 0 : this.props.itemHeight,\n                    //backgroundColor: item.removing ? \"red\" : \"transparent\"\n                }}\n            >\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Animated from \"animated/lib/targets/react-dom\";\nimport SortableSectionListItem from \"../common/SortableSectionListItem\";\nimport ItemContent from \"./ItemContent\";\nimport PlaceholderItem from \"./PlaceholderItem\";\n\nexport default class SortableSectionListItemWeb extends SortableSectionListItem {\n    static propTypes = SortableSectionListItem.propTypes;\n    getInitialAnimatedState() {\n        return {\n            animWidth: new Animated.Value(0),\n            animOpacity: new Animated.Value(0),\n            animHeight: new Animated.Value(0)\n        };\n    }\n    animateAdd() {\n        Animated.timing(this.state.animOpacity, {toValue: 1, duration: 500}).start();\n        Animated.timing(this.state.animWidth, {toValue: 150, duration: 500}).start();\n        Animated.timing(this.state.animHeight, {toValue: this.props.itemHeight, duration: 500}).start();\n    }\n    animateRemove() {\n        Animated.timing(this.state.animOpacity, {toValue: 0, duration: 500}).start();\n        Animated.timing(this.state.animWidth, {toValue: 0, duration: 500}).start();\n        Animated.timing(this.state.animHeight, {toValue: 0, duration: 500}).start();\n    }\n    renderPlaceholder() {\n        let PlaceholderComponent = this.props.placeholderComponent || PlaceholderItem;\n        return (<PlaceholderComponent {...this.props} />);\n    }\n    renderHeader() {\n        let {item, level, toggleSection} = this.props;\n        let HeaderComponent = this.props.headerComponent || ItemContent;\n        return (\n            <div className={\"ssli ssli-\" + level}\n                onClick={() => toggleSection(item)}\n            >\n                <HeaderComponent {...this.props} />\n            </div>\n        );\n    }\n    renderItem() {\n        let {item, toggleSection, level} = this.props;\n        let ItemComponent = this.props.itemComponent || ItemContent;\n\n        return (\n            <Animated.div className={\"ssli ssli-\" + level}\n                style={{\n                    //width: item.removing ? width : width,\n                    opacity: this.state.animOpacity,\n                    width: this.state.animWidth,\n                    //            width: item.removing ? 0 : 150,\n                    height: this.state.animHeight,\n                    //            backgroundColor: item.removing ? \"red\" : \"transparent\"\n                    //marginLeft: isDropTarget ? 150 : 0\n                }}\n                onClick={() => toggleSection(item)}\n            >\n                <ItemComponent {...this.props} />\n            </Animated.div>\n        );\n    }\n}","import React from 'react';\nimport Animated from \"animated/lib/targets/react-dom\";\nimport SortableSectionListRow from \"../common/SortableSectionListRow\";\n\nimport SortableSectionListItem from \"./SortableSectionListItem\";\n\nexport default class SortableSectionListRowWeb extends SortableSectionListRow {\n    static propTypes = SortableSectionListRow.propTypes;\n    getInitialAnimatedState() {\n        return {\n            animOpacity: new Animated.Value(0),\n            animHeight: new Animated.Value(0)\n        };\n    }\n    animateAdd() {\n        Animated.timing(this.state.animOpacity, {toValue: 1, duration: 500}).start();\n        Animated.timing(this.state.animHeight, {toValue: this.props.row.height, duration: 500}).start();\n    }\n    animateRemove() {\n        Animated.timing(this.state.animOpacity, {toValue: 0, duration: 500}).start();\n        Animated.timing(this.state.animHeight, {toValue: 0, duration: 500}).start();\n    }\n    render() {\n        let {row} = this.props;\n\n        return (\n            <Animated.div className={\"sslr sslr-\" + row.level}\n                style={{\n                    opacity: this.state.animOpacity,\n                    height: this.state.animHeight,\n                }}\n            >\n                {row.items.map((item, index) => <SortableSectionListItem {...this.props} isDropTarget={this.state.dropTarget && this.state.dropTarget.indexInRow === index} key={item.id} item={item} level={row.level} />)}\n            </Animated.div>\n        );\n    }\n}","import React from 'react';\nimport SortableSectionList from \"../common/SortableSectionList\";\nimport DraggedItem from \"./DraggedItem\";\nimport SortableSectionListRow from \"./SortableSectionListRow\";\n\nexport default class SortableSectionListWeb extends SortableSectionList {\n    static propTypes = SortableSectionList.propTypes;\n    constructor() {\n        super();\n        this.onMouseDown = this.onMouseDown.bind(this);\n        this.onMouseMove = this.onMouseMove.bind(this);\n        this.onMouseUp = this.onMouseUp.bind(this);\n    }\n    onMouseDown(e) {\n        if (this.state.draggedItem) return;\n        let x = e.pageX - this.containerElement.offsetLeft;\n        let y = e.pageY - this.containerElement.offsetTop;\n        this.startDrag(x, y);\n    }\n    onMouseMove(e) {\n        if (!this.state.draggedItem) return;\n        let x = e.pageX - this.containerElement.offsetLeft;\n        let y = e.pageY - this.containerElement.offsetTop;\n        this.continueDrag(x, y);\n    }\n    onMouseUp(e) {\n        if (!this.state.draggedItem) return;\n        this.endDrag();\n    }\n    render() {\n        let {draggedItem} = this.state;\n        let rows = this.updateRows();\n\n        return (\n            <div\n                ref={(el) => { this.containerElement = el; }}\n                className={\"sectionlist \" + this.props.className}\n                onMouseDown={this.onMouseDown}\n                onMouseMove={this.onMouseMove}\n                onMouseUp={this.onMouseUp}\n            >\n                {rows.map((row, index) => <SortableSectionListRow {...this.props} isDropTarget={this.state.dropTarget && this.state.dropTarget.rowIndex === index} key={row.id} row={row} />)}\n                <DraggedItem {...this.props} item={draggedItem} />\n            </div>\n        );\n    }\n}\n","export let treeData = [\n    {id: \"s1\", title: 'Title1', children: ['item1', 'item2']},\n    {id: \"s2\", title: 'Title2', children: [{id: \"s4\", title: 'Subfolder', children: ['item7', 'item8']}, 'item3', 'item4']},\n    {id: \"s3\", title: 'Title3', children: ['item5', 'item6']},\n];\n\nexport let sectionData = [\n    {id: \"s1\", title: 'First Section', children: ['item1', 'item2']},\n    {id: \"s2\", title: 'Second Section', children: ['item2a', 'item2b', 'item2c', 'item2d']},\n    {id: \"s3\", title: 'Third Section', children: ['item3', 'item4', 'item7', 'item8', 'item9', 'item10']},\n    {id: \"s4\", title: 'Fourth Section', children: ['item5', 'item6']},\n];\n\nfunction findInTree(arr, fn) {\n    for (let i = 0; i < arr.length; i++) {\n        if (fn(arr[i])) return arr[i];\n        if (arr[i].children) {\n            let childResult = findInTree(arr[i].children, fn);\n            if (childResult) return childResult;\n        }\n    }\n    return null;\n}\n\n\nexport function mutatedTree(treeNode, id, fn) {\n    if (treeNode.id === id) return fn(treeNode);\n    if (typeof treeNode !== \"object\") return treeNode;\n    if (!treeNode.children || treeNode.children.length === 0) return treeNode;\n    let newData = treeNode.children.map(n => mutatedTree(n, id, fn));\n    for (let i = 0; i < newData.length; i++) {\n        if (newData[i] !== treeNode.children[i]) {\n            return {\n                ...treeNode,\n                children: newData\n            };\n        }\n    }\n    return treeNode;\n}\n\nexport function moveItem(originalTree, targetItem, droppedItem, dropType) {\n    let fromSectionId = droppedItem.parentId;\n    let toSectionId = null;\n    if (dropType === null) return;\n    if (dropType === \"into\") {\n        toSectionId = targetItem.id;\n    }\n    else {\n        toSectionId = targetItem.parentId;\n    }\n\n    // cannot move an item to itself\n    if (targetItem.id === droppedItem.id) {\n        return originalTree;\n    }\n\n    // cannot move an item into its child tree\n    if (droppedItem.children) {\n        let childTarget = findInTree(droppedItem.children, s => s.id === targetItem.id);\n        if (childTarget) return originalTree;\n    }\n\n\n\n    let fromSection = findInTree(originalTree, s => s.id === fromSectionId);\n    let toSection = findInTree(originalTree, s => s.id === toSectionId);\n\n    console.log(\"Moving\");\n    console.log(fromSection);\n    console.log(toSection);\n\n    let fromSectionData = [...(fromSection.children || [])];\n    let toSectionData = fromSectionId === toSectionId ? fromSectionData : [...(toSection.children || [])];\n\n    let originalItem = fromSectionData.find(o => o === droppedItem.title || o.id === droppedItem.id);\n\n\n    if (!originalItem) {\n        console.warn(\"original item not found\");\n        return;\n    }\n\n\n    if (dropType === \"into\") {\n        fromSectionData.splice(fromSectionData.indexOf(originalItem), 1);\n        toSectionData.push({...originalItem, parentId: toSectionId});\n    }\n    else {\n        fromSectionData.splice(fromSectionData.indexOf(originalItem), 1);\n        let originalTargetItem = toSectionData.find(o => o === targetItem.title || o.id === targetItem.id);\n        if (dropType === \"before\") {\n            toSectionData.splice(toSectionData.indexOf(originalTargetItem), 0, {...originalItem, parentId: toSectionId});\n        }\n        else if (dropType === \"after\") {\n            toSectionData.splice(toSectionData.indexOf(originalTargetItem) + 1, 0, {...originalItem, parentId: toSectionId});\n        }\n    }\n\n    // if fromSection is inside toSection, need to apply changes there also\n    toSectionData = toSectionData\n        .map((tn) => mutatedTree(\n            tn,\n            fromSectionId,\n            section => ({\n                ...section,\n                children: fromSectionData\n            })));\n\n\n    let newTree = originalTree\n        .map((tn) => mutatedTree(\n            tn,\n            fromSectionId,\n            section => ({\n                ...section,\n                children: fromSectionData\n            })))\n        .map((tn) => mutatedTree(\n            tn,\n            toSectionId,\n            section => ({\n                ...section,\n                children: toSectionData\n            })));\n\n\n    return newTree;\n}\n\nexport function expandStringItems(d, parentId, index) {\n    if (typeof d === \"string\") {\n        return {\n            id: (parentId || \"item\") + \"-\" + index,\n            title: d,\n            parentId\n        };\n    }\n    else if (Array.isArray(d)) {\n        return d.map((n, i) => expandStringItems(n, parentId, i));\n    }\n    else if (typeof d === \"object\") {\n        let result = {\n            parentId,\n            ...d,\n        };\n        if (!d.id) result.id = (parentId || \"item\") + \"-\" + index;\n        if (d.children) result.children = expandStringItems(d.children, result.id);\n        return result;\n    }\n    else {\n        return d;\n    }\n}\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport SortableSectionList from \"../web/SortableSectionList\";\n\nimport {sectionData, expandStringItems, moveItem, mutatedTree} from \"./ExampleModel\";\n\n\n\nclass SectionHeader extends Component {\n    static propTypes = {\n        item: PropTypes.shape({\n        }).isRequired\n    }\n    render() {\n        let {item} = this.props;\n        return (\n            <div className=\"sectionheader\">{item.title}</div>\n        );\n    }\n}\n\nclass ThumbnailItem extends Component {\n    static propTypes = {\n        item: PropTypes.shape({\n        }).isRequired\n    }\n    render() {\n        let {item} = this.props;\n        return (\n            <div className=\"draggablethumb\">Thumb {item.title}</div>\n        );\n    }\n}\n\n\nclass Sections extends Component {\n    constructor() {\n        super();\n        this.state = {\n            sections: expandStringItems(sectionData),\n        };\n        console.log(this.state.sections);\n        this.toggleSection = this.toggleSection.bind(this);\n        this.handleMove = this.handleMove.bind(this);\n        this.willAcceptDrop = this.willAcceptDrop.bind(this);\n    }\n    toggleSection(item) {\n        let newData = this.state.sections.map((node) => {\n            return mutatedTree(node, item.id, n => ({...n, collapsed: !n.collapsed}));\n        });\n        this.setState({sections: newData});\n    }\n    willAcceptDrop(targetItem, droppedItem, x, y) {\n        if (targetItem.parentId === undefined) return \"into\";\n        if (x < 75) return \"before\";\n        //else if (x >= 50  && x < 100) return \"into\";\n        else if (x >= 75) return \"after\";\n        else return null;\n    }\n    handleMove(targetItem, droppedItem, dropType) {\n\n        console.log(\"Dropping \" + droppedItem.title + \" \" + dropType + \" \" + targetItem.title);\n\n        this.setState({sections: moveItem(this.state.sections, targetItem, droppedItem, dropType)});\n\n\n\n    }\n    render() {\n        let {sections} = this.state;\n        return (\n            <SortableSectionList\n                className=\"grid\"\n                numCols={4}\n                itemWidth={150}\n                itemHeight={200}\n                rootItemHeight={40}\n                toggleSection={this.toggleSection}\n                headerComponent={SectionHeader}\n                itemComponent={ThumbnailItem}\n                willAcceptDrop={this.willAcceptDrop}\n                handleMove={this.handleMove}\n                sections={sections} />\n\n        );\n    }\n}\n\nexport default Sections;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {SortableSectionList} from \"../web\";\n\nimport {treeData, mutatedTree, expandStringItems, moveItem} from \"./ExampleModel\";\n\n\n\nclass TreeRow extends Component {\n    static propTypes = {\n        item: PropTypes.shape({\n        }).isRequired,\n        toggleSection: PropTypes.func,\n    }\n    render() {\n        let {item} = this.props;\n        if (item.children) {\n            return (\n                <div>{item.collapsed ? \"+\" : \"-\"} {item.title}</div>\n            );\n        }\n        else {\n            return (\n                <div>{item.title}</div>\n            );\n        }\n    }\n}\n\nclass TreeDemo extends Component {\n    constructor() {\n        super();\n        this.toggleTreeNode = this.toggleTreeNode.bind(this);\n        this.handleMove = this.handleMove.bind(this);\n        this.willAcceptDrop = this.willAcceptDrop.bind(this);\n    }\n    state = {\n        treeNodes: expandStringItems(treeData)\n    };\n    toggleTreeNode(item) {\n        let newData = this.state.treeNodes.map((node) => {\n            return mutatedTree(node, item.id, n => ({...n, collapsed: !n.collapsed}));\n        });\n        this.setState({treeNodes: newData});\n    }\n    willAcceptDrop(targetItem, droppedItem, x, y, w, h) {\n        if (targetItem.id === droppedItem.id) return null;\n        if (targetItem.parentId === undefined) return \"into\";\n        if (y < 7) return \"before\";\n        else if (y >= 7 && y < 23) return \"into\";\n        else if (y >= 23) return \"after\";\n        else return null;\n    }\n    handleMove(targetItem, droppedItem, dropType) {\n        console.log(\"Dropping \" + droppedItem.title + \" \" + dropType + \" \" + targetItem.title);\n        this.setState({treeNodes: moveItem(this.state.treeNodes, targetItem, droppedItem, dropType)});\n    }\n    render() {\n        let {treeNodes} = this.state;\n        return (\n            <SortableSectionList\n                className=\"tree\"\n                numCols={1}\n                itemWidth={200}\n                itemHeight={30}\n                rootItemHeight={30}\n                toggleSection={this.toggleTreeNode}\n                willAcceptDrop={this.willAcceptDrop}\n                handleMove={this.handleMove}\n                headerComponent={TreeRow}\n                itemComponent={TreeRow}\n                sections={treeNodes} />\n        );\n    }\n}\n\nexport default TreeDemo;\n","import React, { Component } from 'react';\n\nimport './App.scss';\n\nimport Sections from \"./examples/Sections\";\nimport Tree from \"./examples/Tree\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>React Sortable Section List</h1>\n                <a className=\"subtitle\" href=\"https://github.com/tqc/react-sortable-sectionlist\">github.com/tqc/react-sortable-sectionlist</a>\n\n                <p>A work in progress react list component. Design goals include:</p>\n                <ul>\n                    <li>Common API for web and React Native implementations</li>\n                    <li>Reasonable performance with large lists</li>\n                    <li>Animation based on datasource changes rather than UI events</li>\n                    <li>Extensible with arbitrary list item components</li>\n                    <li>Multicolumn, but with the option for full width items</li>\n                </ul>\n\n\n\n                <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, </p>\n                <p>quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n                <hr/>\n                <h2>Demo</h2>\n                <p>A similar data structure rendered as a tree or grid by using different item components</p>\n                <div className=\"demorow\">\n                    <div className=\"treedemo\">\n                        <Tree />\n                    </div>\n                    <div className=\"griddemo\">\n                        <Sections />\n                    </div>\n                </div>\n                <hr/>\n                <h2>Usage</h2>\n                <pre><code>npm install react-sortable-sectionlist\n                </code></pre>\n                <p>See src/examples for details</p>\n                <pre><code>{\"<SortableSectionList\\n\\\n    className='grid'\\n\\\n    numCols={4}\\n\\\n    itemWidth={150}\\n\\\n    itemHeight={200}\\n\\\n    rootItemHeight={40}\\n\\\n    toggleSection={this.toggleSection}\\n\\\n    headerComponent={SectionHeader}\\n\\\n    itemComponent={ThumbnailItem}\\n\\\n    willAcceptDrop={this.willAcceptDrop}\\n\\\n    handleMove={this.handleMove}\\n\\\n    sections={sections} />\"}\n                </code></pre>\n\n\n\n\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}